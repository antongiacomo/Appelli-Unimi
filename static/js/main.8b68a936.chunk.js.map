{"version":3,"sources":["Block.js","App.js","serviceWorker.js","index.js"],"names":["Block","item","chiusura","weigth","moment","diff","className","appelli","map","appello","chiusuraStr","data","format","App","useState","setData","title","setTitle","useEffect","config","headers","a","axios","result","fetchData","onChange","event","target","value","toLowerCase","split","filter","element","descrIns","includes","docente","nome","cognome","some","clear","key","codW4","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QA2CeA,MAxCf,YAA0B,IAATC,EAAQ,EAARA,KACf,SAASC,EAASA,GAChB,IAAIC,EAAS,sBAGb,OAFAD,EAAWE,MAASC,KAAKH,EAAU,WAElB,GAAKA,GAAY,EAAU,iBAAmBC,EAC3DD,EAAW,EAAU,cAAgBC,EAClC,gBAAkBA,EAG3B,OACE,yBAAKG,UAAU,mBACZL,EAAKM,QAAQC,KAAI,SAACC,GAAD,OAChB,yBAAKH,UAAU,gDACb,yBACEA,UACEF,MAASC,KAAKI,EAAQP,SAAU,QAAU,EACtC,aACA,eAGN,2BACE,0BAAMI,UAAU,eAAhB,aACA,0BAAMA,UAAWJ,EAASO,EAAQP,UAAY,QAC3CO,EAAQC,YADX,IACyBN,MAASC,KAAKI,EAAQP,SAAU,QAAS,IADlE,YAKF,0BAAMI,UAAU,eAAhB,aACCF,IAAOK,EAAQE,MAAMC,OAAO,QAE7B,0BAAMN,UAAU,WAAhB,IACIF,MAASC,KAAKI,EAAQE,KAAM,QADhC,mBC4CGE,MAxEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNH,EADM,KACAI,EADA,OAEaD,mBAAS,CAAC,KAFvB,mBAENE,EAFM,KAECC,EAFD,KAmCb,OA9BAC,qBAAU,WACR,IAAIC,EAAS,CACXC,QAAS,CAAE,8BAA+B,OAG7B,uCAAG,4BAAAC,EAAA,sEACKC,IACnB,qFACAH,GAHc,OACVI,EADU,OAMhBR,EAAQQ,EAAOZ,MANC,2CAAH,qDASfa,KACC,IAgBD,yBAAKlB,UAAU,IACb,yBAAKA,UAAU,yBAMb,2BACEA,UAAU,oDACVmB,SAAU,SAACC,GAAD,OAAWT,EAASS,EAAMC,OAAOC,MAAMC,cAAcC,MAAM,UAGzE,yBAAKxB,UAAU,sBACZK,EACEoB,QAAO,SAAC9B,GAAD,OA5BhB,SAAeA,GAUb,OATae,EAAMR,KAAI,SAACwB,GAExB,OACE/B,EAAKgC,SAASJ,cAAcK,SAASF,IACrC/B,EAAKM,QAAQ,GAAG4B,QAAQC,KAAKP,cAAcK,SAASF,IACpD/B,EAAKM,QAAQ,GAAG4B,QAAQE,QAAQR,cAAcK,SAASF,MAI3CM,MAAK,SAACrC,GAAD,OAAUA,KAkBLsC,CAAMtC,MACvBO,KAAI,SAACP,GACJ,OACE,yBAAKK,UAAU,yCAAyCkC,IAAKvC,EAAKwC,OAEhE,yBAAKnC,UAAU,8CACb,uBAAGA,UAAU,4BAA4BL,EAAKgC,UAC9C,uBAAG3B,UAAU,gBACVL,EAAKM,QAAQ,GAAG4B,QAAQC,KAAM,IAC9BnC,EAAKM,QAAQ,GAAG4B,QAAQE,SAE7B,kBAAC,EAAD,CAAOpC,KAAI,OAAEA,QAAF,IAAEA,IAAQ,aCvDjByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b68a936.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\n\nfunction Block({ item }) {\n  function chiusura(chiusura) {\n    var weigth = \"600 border-b-2 pb-0\";\n    chiusura = moment().diff(chiusura, \"days\");\n\n    if (chiusura >= -2 && chiusura <= 0) return \"border-yellow-\" + weigth;\n    if (chiusura > 0) return \"border-red-\" + weigth;\n    return \"border-green-\" + weigth;\n  }\n\n  return (\n    <div className=\"flex flex-wrap \">\n      {item.appelli.map((appello) => (\n        <div className=\"w-full bg-gray-200 mr-1 my-1 p-2 rounded-lg \">\n          <div\n            className={\n              moment().diff(appello.chiusura, \"days\") > 0\n                ? \"opacity-50\"\n                : \"opacity-100\"\n            }\n          >\n            <p>\n              <span className=\"font-medium\">Chiusura:</span>\n              <span className={chiusura(appello.chiusura) + \" p-1\"}>\n                {appello.chiusuraStr}({moment().diff(appello.chiusura, \"days\")}{\" \"}\n                giorni)\n              </span>\n            </p>\n            <span className=\"font-medium\">Appello: </span>\n            {moment(appello.data).format(\"DD/M\")}\n\n            <span className=\"text-sm\">\n              ({moment().diff(appello.data, \"days\")} giorni)\n            </span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\nexport default Block;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./tailwind.generated.css\";\nimport Block from \"./Block\";\n\n//\nfunction App() {\n  const [data, setData] = useState([]);\n  const [title, setTitle] = useState([\"\"]);\n  //const [filter, setFilter] = useState(\"/\");\n\n  useEffect(() => {\n    var config = {\n      headers: { \"Access-Control-Allow-Origin\": \"*\" },\n    };\n\n    const fetchData = async () => {\n      const result = await axios(\n        \"https://cors-anywhere.herokuapp.com/https://work.unimi.it/foProssimiEsami/json/F94\",\n        config\n      );\n\n      setData(result.data);\n    };\n\n    fetchData();\n  }, []);\n\n  function clear(item) {\n    var result = title.map((element) =>{\n\n    return (\n      item.descrIns.toLowerCase().includes(element) ||\n      item.appelli[0].docente.nome.toLowerCase().includes(element) ||\n      item.appelli[0].docente.cognome.toLowerCase().includes(element)\n    );\n    })\n\n    return result.some((item) => item);\n  }\n\n  return (\n    <div className=\"\">\n      <div className=\"w-full h-10 px-4 my-6\">\n      {/* <input\n          className=\"w-full h-full border py-2 px-4 rounded-lg shadow\"\n\n          onChange={(event) => setFilter(\"/\" + event.target.value.toLowerCase())}\n        /> */}\n        <input\n          className=\"w-full  h-full border py-2 px-4 rounded-lg shadow\"\n          onChange={(event) => setTitle(event.target.value.toLowerCase().split(\"&\"))}\n        />\n      </div>\n      <div className=\"flex flex-wrap p-3\">\n        {data\n          .filter((item) => clear(item))\n          .map((item) => {\n            return (\n              <div className=\"lg:w-1/4 md:w-1/3 sm:w-1/2 w-full  p-3\" key={item.codW4}>\n\n                <div className=\"border w-full h-full p-4 rounded-lg shadow\">\n                  <p className=\"font-medium text-lg mb-1\">{item.descrIns}</p>\n                  <p className=\"text-sm mb-5\">\n                    {item.appelli[0].docente.nome}{\" \"}\n                    {item.appelli[0].docente.cognome}\n                  </p>\n                <Block item={item ?? []} ></Block>\n                </div>\n\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}